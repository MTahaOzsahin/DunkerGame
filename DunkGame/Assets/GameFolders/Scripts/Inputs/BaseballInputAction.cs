//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameFolders/Scripts/Inputs/BaseballInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace DunkGame.Inputs
{
    public partial class @BaseballInputAction : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @BaseballInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""BaseballInputAction"",
    ""maps"": [
        {
            ""name"": ""Baseball"",
            ""id"": ""5b9eaa4f-2249-42cc-9b7a-9b8d68ce0757"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""a9241b8a-b6ae-4617-bd8e-414f0985d2d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""10702a4a-a909-475a-9824-eed2eacfd12f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryContact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""982ca63a-5b9d-4c4a-a3e6-dee81a48162f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2b7b2be0-6c9c-446e-88d9-4238a3b7a56c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""45fa1922-2917-4429-83ac-b07ab69945ce"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ef352c40-aee0-48de-814f-e7f2b964d94c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f63e4e35-d16a-488d-a1c0-4eaab8cff27b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""332202d1-d9c6-4b49-ac6c-ca58c86da2d6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c54d7f86-f1f3-4dd8-8706-fc9cc3abd27c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""d3ba3529-7184-4b1f-9893-27062903b025"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8f32428c-cb72-4bda-a55b-4bd3472976a1"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""56fab988-ace0-4bb1-8aaf-0090181f1d7b"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""722f8f19-6dbe-4740-b3d8-5534d83c806a"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c08c23f9-70ba-4ebc-8930-20ee430b9f3b"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5a05456a-1117-447f-a4e0-c9c2a1addab2"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(pressPoint=0.1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04321692-7e2d-4797-8e0f-b2b977755135"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Baseball
            m_Baseball = asset.FindActionMap("Baseball", throwIfNotFound: true);
            m_Baseball_Movement = m_Baseball.FindAction("Movement", throwIfNotFound: true);
            m_Baseball_Joystick = m_Baseball.FindAction("Joystick", throwIfNotFound: true);
            m_Baseball_PrimaryContact = m_Baseball.FindAction("PrimaryContact", throwIfNotFound: true);
            m_Baseball_PrimaryPosition = m_Baseball.FindAction("PrimaryPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Baseball
        private readonly InputActionMap m_Baseball;
        private IBaseballActions m_BaseballActionsCallbackInterface;
        private readonly InputAction m_Baseball_Movement;
        private readonly InputAction m_Baseball_Joystick;
        private readonly InputAction m_Baseball_PrimaryContact;
        private readonly InputAction m_Baseball_PrimaryPosition;
        public struct BaseballActions
        {
            private @BaseballInputAction m_Wrapper;
            public BaseballActions(@BaseballInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_Baseball_Movement;
            public InputAction @Joystick => m_Wrapper.m_Baseball_Joystick;
            public InputAction @PrimaryContact => m_Wrapper.m_Baseball_PrimaryContact;
            public InputAction @PrimaryPosition => m_Wrapper.m_Baseball_PrimaryPosition;
            public InputActionMap Get() { return m_Wrapper.m_Baseball; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(BaseballActions set) { return set.Get(); }
            public void SetCallbacks(IBaseballActions instance)
            {
                if (m_Wrapper.m_BaseballActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_BaseballActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_BaseballActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_BaseballActionsCallbackInterface.OnMovement;
                    @Joystick.started -= m_Wrapper.m_BaseballActionsCallbackInterface.OnJoystick;
                    @Joystick.performed -= m_Wrapper.m_BaseballActionsCallbackInterface.OnJoystick;
                    @Joystick.canceled -= m_Wrapper.m_BaseballActionsCallbackInterface.OnJoystick;
                    @PrimaryContact.started -= m_Wrapper.m_BaseballActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryContact.performed -= m_Wrapper.m_BaseballActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryContact.canceled -= m_Wrapper.m_BaseballActionsCallbackInterface.OnPrimaryContact;
                    @PrimaryPosition.started -= m_Wrapper.m_BaseballActionsCallbackInterface.OnPrimaryPosition;
                    @PrimaryPosition.performed -= m_Wrapper.m_BaseballActionsCallbackInterface.OnPrimaryPosition;
                    @PrimaryPosition.canceled -= m_Wrapper.m_BaseballActionsCallbackInterface.OnPrimaryPosition;
                }
                m_Wrapper.m_BaseballActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Joystick.started += instance.OnJoystick;
                    @Joystick.performed += instance.OnJoystick;
                    @Joystick.canceled += instance.OnJoystick;
                    @PrimaryContact.started += instance.OnPrimaryContact;
                    @PrimaryContact.performed += instance.OnPrimaryContact;
                    @PrimaryContact.canceled += instance.OnPrimaryContact;
                    @PrimaryPosition.started += instance.OnPrimaryPosition;
                    @PrimaryPosition.performed += instance.OnPrimaryPosition;
                    @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                }
            }
        }
        public BaseballActions @Baseball => new BaseballActions(this);
        public interface IBaseballActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnJoystick(InputAction.CallbackContext context);
            void OnPrimaryContact(InputAction.CallbackContext context);
            void OnPrimaryPosition(InputAction.CallbackContext context);
        }
    }
}
